import Config

# IO.inspect("releases.exs")

# database_url =
#   System.get_env("DATABASE_URL") ||
#     raise """
#     environment variable DATABASE_URL is missing.
#     For example: ecto://USER:PASS@HOST/DATABASE
#     """

# secret_key_base =
#   System.get_env("SECRET_KEY_BASE") ||
#     raise """
#     environment variable SECRET_KEY_BASE is missing.
#     You can generate one by calling: mix phx.gen.secret
#     """


# backend_url = System.get_env("BACKEND_URL") || "localhost"

# config :chat_api,
#   ecto_repos: [ChatApi.Repo],
#   generators: [binary_id: true]

# config :chat_api, ChatApi.Repo,
#   ssl: false,
#   url: database_url,
#   pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10")

# config :chat_api, ChatApiWeb.Endpoint,
#   http: [
#     port: String.to_integer(System.get_env("PORT") || "4000"),
#     transport_options: [socket_opts: [:inet6]]
#   ],
#   url: [scheme: "https", host: {:system, backend_url}, port: 443],
#   secret_key_base: secret_key_base,
#   server: true

database_url = System.get_env("DATABASE_URL") || "ecto://postgres:postgres@localhost/chat_api_dev"

# Configure your database
config :chat_api, ChatApi.Repo,
  url: database_url,
  show_sensitive_data_on_connection_error: false,
  pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :chat_api, ChatApiWeb.Endpoint,
  http: [port: 80],
  check_origin: false,
  server: true

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
# config :chat_api, OpusWeb.Endpoint,
#   live_reload: [
#     patterns: [
#       ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
#       ~r"priv/gettext/.*(po)$",
#       ~r"lib/opus_web/(live|views)/.*(ex)$",
#       ~r"lib/opus_web/templates/.*(eex)$"
#     ]
#   ]

# # Do not include metadata nor timestamps in development logs
# config :logger, :console, format: "[$level] $message\n"

# # Set a higher stacktrace during development. Avoid configuring such
# # in production as building large stacktraces may be expensive.
# config :phoenix, :stacktrace_depth, 20

# # Initialize plugs at runtime for faster development compilation
# config :phoenix, :plug_init_mode, :runtime
